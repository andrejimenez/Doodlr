
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ID OP_ADD OP_DIFF OP_DIV OP_EQUALS OP_EQUALTO OP_GREATT OP_GREATTEQ OP_LESST OP_LESSTEQ OP_MOD OP_MULT OP_POW OP_SUBS PR_While PR_and PR_bool PR_circulo PR_else PR_espiral PR_estrella PR_false PR_float PR_function PR_global PR_if PR_int PR_main PR_or PR_read PR_rectangulo PR_return PR_true PR_void PR_write TO_BRACKCLO TO_BRACKOP TO_CBRACKCLO TO_CBRACKOP TO_COMA TO_FLOAT TO_INT TO_PARCLO TO_PAROP TO_PuntoComa programa : startQuad varGlobales cambiaScope declaraFunciones PR_main fillMainQuad TO_BRACKOP setMainFuncionValores mainBloque TO_BRACKCLO endProgramastartQuad :fillMainQuad : endPrograma :  cambiaScope :  varGlobales : PR_global defVariables varGlobales\n                    | empty declaraFunciones : PR_function defFuncion declaraFunciones\n                         | empty defFuncion : decTipo ID agregaFuncion TO_PAROP decParametros TO_PARCLO TO_BRACKOP mainBloque TO_BRACKCLO endProcCuad agregaFuncion :  endProcCuad :  decParametros : decTipo ID meteVariable\n               | decTipo ID meteVariable TO_COMA decParametros  mainBloque : funcCiclos mainBloque\n            | funcCondicionales mainBloque\n            | defVariables mainBloque\n            | llamadaDeFunciones mainBloque\n            | funcIgual mainBloque\n            | funcWrite mainBloque\n            | funcRead mainBloque\n            | funcReturn mainBloque\n            | empty  setMainFuncionValores :  funcWrite : PR_write TO_PAROP ID agregaWriteCuad TO_PARCLO TO_PuntoComa funcRead : PR_read TO_PAROP ID agregaReadCuad TO_PARCLO TO_PuntoComa funcReturn : PR_return TO_PAROP ID agregaReturnCuad TO_PARCLO TO_PuntoComa funcIgual : ID pushPilaVar OP_EQUALS pushPilaOp defExpresiones TO_PuntoComa extraNeed agregaIgualCuad\n                  | ID pushPilaVar OP_EQUALS pushPilaOp llamadaDeFunciones agregaIgualFuncCuad extraNeed : empty  funcCiclos :  PR_While whileCuadP1 TO_PAROP defExpresiones TO_PARCLO whileCuadP2 TO_BRACKOP mainBloque TO_BRACKCLO whileCuadP3 funcCondicionales : PR_if TO_PAROP defExpresiones TO_PARCLO agregaIfCuadP1 TO_BRACKOP mainBloque TO_BRACKCLO else agregaIfCuadP3 else : agregaIfCuadP2 PR_else TO_BRACKOP mainBloque TO_BRACKCLO\n             | empty  decTipo : PR_int tipoVar\n                | PR_float tipoVar\n                | PR_bool tipoVar\n                | PR_void tipoVar defVariables : PR_int tipoVar defVar1 TO_PuntoComa\n                     | PR_float tipoVar defVar1 TO_PuntoComa\n                     | PR_bool tipoVar defVar1 TO_PuntoComa\n                     | PR_void tipoVar defVar1 TO_PuntoComa  defVar1 : variable defVar2\n                | arreglo defVar2  defVar2 : TO_COMA defVar1\n                | empty  variable : ID meteVariable  arreglo : ID TO_CBRACKOP TO_INT TO_CBRACKCLO escribeArrescribeArr : empty tipoVar : empty  meteVariable : empty  defExpresiones : decExpresion\n                       | decExpresion PR_and pushPilaOp defExpresiones agregaAndCuad\n                       | decExpresion PR_or pushPilaOp defExpresiones agregaAndCuad  decExpresion : miniExp\n        | miniExp OP_EQUALTO pushPilaOp miniExp agregaComparCuad\n        | miniExp OP_DIFF pushPilaOp  miniExp agregaComparCuad\n        | miniExp OP_LESST pushPilaOp  miniExp agregaComparCuad\n        | miniExp OP_LESSTEQ pushPilaOp miniExp agregaComparCuad\n        | miniExp OP_GREATT pushPilaOp  miniExp agregaComparCuad\n        | miniExp OP_GREATTEQ pushPilaOp miniExp agregaComparCuad  miniExp : microExp\n                | microExp OP_SUBS pushPilaOp miniExp agregaSumResCuad\n                | microExp OP_ADD pushPilaOp miniExp  agregaSumResCuad  microExp : micromicroExp\n                 | micromicroExp OP_MULT pushPilaOp microExp agregaMultDivCuad\n                 | micromicroExp OP_DIV pushPilaOp microExp agregaMultDivCuad\n                 | micromicroExp OP_MOD pushPilaOp microExp agregaMultDivCuad  micromicroExp : decSolucion\n                      | decSolucion OP_POW pushPilaOp micromicroExp agregaPowCuad  decSolucion : ID pushPilaVar\n                    | ID TO_CBRACKOP defExpresiones TO_CBRACKCLO cuadArrPush\n                    | TO_INT agregaIntCuad\n                    | TO_FLOAT agregaFloatCuad\n                    | PR_true agregaBoolCuad\n                    | PR_false agregaBoolCuad\n                    | TO_PAROP pushPilaOp defExpresiones TO_PARCLO pushPilaOp   llamadaDeFunciones : ID eraCuadruplo TO_PAROP decParamFuncs TO_PARCLO TO_PuntoComa goSubCuadruplo\n    \t\t\t\t\t   | funcionesDibuja\n                           | empty funcionesDibuja : PR_circulo  TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa circuloCuad\n                        | PR_rectangulo TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa rectanguloCuad\n                        | PR_espiral TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa espiralCuad\n                        | PR_estrella TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa estrellaCuad decParamFuncs : miniExp paramCuadruplo\n                      | ID paramCuadruplo TO_COMA decParamFuncs\n                      | empty  pushPilaOp : empty  pushPilaVar : empty  agregaIntCuad : empty  agregaFloatCuad : empty  agregaBoolCuad : empty cuadArrPush : empty agregaAndCuad :  agregaComparCuad :  agregaSumResCuad :  agregaMultDivCuad :  agregaPowCuad :  agregaIgualCuad :  agregaIgualFuncCuad : cuadruploAsignaArr : empty agregaWriteCuad :  agregaReadCuad :  agregaReturnCuad :  agregaIfCuadP1 :  agregaIfCuadP2 :  agregaIfCuadP3 :  whileCuadP1 :  whileCuadP2 :  whileCuadP3 :  paramCuadruplo :  eraCuadruplo :  goSubCuadruplo :  circuloCuad :  rectanguloCuad :  espiralCuad :  estrellaCuad :  empty : '
    
_lr_action_items = {'PR_global':([0,2,7,42,50,51,52,],[-2,4,4,-39,-40,-41,-42,]),'PR_function':([0,2,3,5,6,7,15,22,42,50,51,52,207,237,],[-2,-118,-5,-7,13,-118,-6,13,-39,-40,-41,-42,-12,-10,]),'PR_main':([0,2,3,5,6,7,12,14,15,22,36,42,50,51,52,207,237,],[-2,-118,-5,-7,-118,-118,21,-9,-6,-118,-8,-39,-40,-41,-42,-12,-10,]),'$end':([1,85,108,],[0,-4,-1,]),'PR_int':([4,13,42,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,73,123,132,135,164,172,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[8,24,-39,-40,-41,-42,-24,8,24,8,8,8,8,8,8,8,8,-80,-79,-118,8,-88,-118,24,-100,-80,8,-113,-118,-29,-25,-26,-27,8,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,8,-33,]),'PR_float':([4,13,42,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,73,123,132,135,164,172,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[9,25,-39,-40,-41,-42,-24,9,25,9,9,9,9,9,9,9,9,-80,-79,-118,9,-88,-118,25,-100,-80,9,-113,-118,-29,-25,-26,-27,9,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,9,-33,]),'PR_bool':([4,13,42,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,73,123,132,135,164,172,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[10,26,-39,-40,-41,-42,-24,10,26,10,10,10,10,10,10,10,10,-80,-79,-118,10,-88,-118,26,-100,-80,10,-113,-118,-29,-25,-26,-27,10,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,10,-33,]),'PR_void':([4,13,42,50,51,52,53,57,58,61,62,63,64,65,66,67,68,69,73,123,132,135,164,172,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[11,27,-39,-40,-41,-42,-24,11,27,11,11,11,11,11,11,11,11,-80,-79,-118,11,-88,-118,27,-100,-80,11,-113,-118,-29,-25,-26,-27,11,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,11,-33,]),'ID':([8,9,10,11,16,17,18,19,20,23,24,25,26,27,38,39,40,41,42,44,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,81,95,99,100,101,102,103,104,105,109,110,122,123,132,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,164,168,169,170,171,177,178,179,180,181,182,183,184,185,186,187,188,189,190,197,198,210,226,227,228,229,230,231,232,233,234,235,236,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-118,-118,-118,-118,31,-50,31,31,31,37,-118,-118,-118,-118,-35,-36,-37,-38,-39,31,-40,-41,-42,-24,72,72,72,72,72,72,72,72,72,-80,-79,106,117,124,125,126,127,128,129,130,117,-118,160,-118,72,117,-88,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,117,195,202,203,204,205,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-100,-80,72,160,-113,-118,-29,-25,-26,-27,261,262,263,264,72,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,72,-33,]),'TO_BRACKOP':([21,35,107,136,174,176,208,282,],[-3,53,132,-105,-109,210,238,287,]),'TO_PuntoComa':([28,29,30,31,32,33,34,43,45,46,47,49,55,59,83,84,98,112,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,193,195,196,199,200,201,209,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,268,269,270,271,],[42,-118,-118,-118,50,51,52,-43,-46,-44,-47,-51,-45,-118,-48,-49,-89,-52,-55,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,227,-118,228,230,231,232,-118,-94,-94,-95,-95,-95,-95,-95,-95,-96,-96,-97,-97,-97,-98,-118,-77,-53,-54,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-68,-70,-72,-93,276,277,278,279,]),'TO_COMA':([29,30,31,47,49,59,83,84,106,127,128,129,130,131,160,192,202,203,204,205,],[44,44,-118,-47,-51,-118,-48,-49,-118,168,169,170,171,172,-111,226,233,234,235,236,]),'TO_CBRACKOP':([31,117,160,195,],[48,152,152,152,]),'TO_PAROP':([37,54,70,71,72,74,75,76,77,78,79,80,94,95,96,109,110,122,123,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,195,226,],[-11,58,-108,95,-112,99,100,101,102,103,104,105,109,110,122,110,-118,110,-118,110,-88,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-112,110,]),'PR_While':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,70,70,70,70,70,70,70,70,70,-80,-79,-118,70,-88,-118,-100,-80,70,-113,-118,-29,-25,-26,-27,70,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,70,-33,]),'PR_if':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,71,71,71,71,71,71,71,71,71,-80,-79,-118,71,-88,-118,-100,-80,71,-113,-118,-29,-25,-26,-27,71,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,71,-33,]),'PR_write':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,74,74,74,74,74,74,74,74,74,-80,-79,-118,74,-88,-118,-100,-80,74,-113,-118,-29,-25,-26,-27,74,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,74,-33,]),'PR_read':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,75,75,75,75,75,75,75,75,75,-80,-79,-118,75,-88,-118,-100,-80,75,-113,-118,-29,-25,-26,-27,75,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,75,-33,]),'PR_return':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,76,76,76,76,76,76,76,76,76,-80,-79,-118,76,-88,-118,-100,-80,76,-113,-118,-29,-25,-26,-27,76,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,76,-33,]),'PR_circulo':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,77,77,77,77,77,77,77,77,77,-80,-79,-118,77,-88,77,-100,-80,77,-113,-118,-29,-25,-26,-27,77,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,77,-33,]),'PR_rectangulo':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,78,78,78,78,78,78,78,78,78,-80,-79,-118,78,-88,78,-100,-80,78,-113,-118,-29,-25,-26,-27,78,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,78,-33,]),'PR_espiral':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,79,79,79,79,79,79,79,79,79,-80,-79,-118,79,-88,79,-100,-80,79,-113,-118,-29,-25,-26,-27,79,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,79,-33,]),'PR_estrella':([42,50,51,52,53,57,61,62,63,64,65,66,67,68,69,73,123,132,135,164,197,198,210,227,228,229,230,231,232,238,258,259,260,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,289,],[-39,-40,-41,-42,-24,80,80,80,80,80,80,80,80,80,-80,-79,-118,80,-88,80,-100,-80,80,-113,-118,-29,-25,-26,-27,80,-78,-99,-30,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,80,-33,]),'TO_BRACKCLO':([42,50,51,52,53,57,60,61,62,63,64,65,66,67,68,69,73,86,87,88,89,90,91,92,93,123,132,135,164,173,197,198,210,227,228,229,230,231,232,238,240,258,259,260,265,266,267,272,273,275,276,277,278,279,280,281,283,284,285,286,287,288,289,],[-39,-40,-41,-42,-24,-118,85,-118,-118,-118,-118,-118,-118,-118,-118,-23,-79,-15,-16,-17,-18,-19,-20,-21,-22,-118,-118,-88,-118,207,-100,-80,-118,-113,-118,-29,-25,-26,-27,-118,266,-78,-99,-30,272,-118,-28,-110,-107,-34,-114,-115,-116,-117,-31,-32,-81,-82,-83,-84,-118,289,-33,]),'TO_INT':([48,95,109,110,122,123,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,226,],[56,118,118,-118,118,-118,118,-88,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'TO_PARCLO':([49,82,98,106,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,131,133,135,151,153,154,155,156,157,158,159,160,161,162,163,165,166,167,175,194,206,209,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,261,262,263,264,],[-51,107,-89,-118,136,-52,-55,-62,-65,-69,-118,-118,-118,-118,-118,-118,-102,-103,-104,-13,174,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,193,-111,-87,199,200,201,209,-85,-14,-118,-94,-94,-95,-95,-95,-95,-95,-95,-96,-96,-97,-97,-97,-98,-118,-118,-77,-53,-54,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-68,-70,-72,-93,-86,268,269,270,271,]),'TO_CBRACKCLO':([56,98,112,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,191,209,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,239,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,],[59,-89,-52,-55,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,225,-118,-94,-94,-95,-95,-95,-95,-95,-95,-96,-96,-97,-97,-97,-98,-118,-77,-53,-54,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-68,-70,-72,-93,]),'OP_EQUALS':([72,97,98,],[-118,123,-89,]),'TO_FLOAT':([95,109,110,122,123,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,226,],[119,119,-118,119,-118,119,-88,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'PR_true':([95,109,110,122,123,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,226,],[120,120,-118,120,-118,120,-88,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'PR_false':([95,109,110,122,123,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,226,],[121,121,-118,121,-118,121,-88,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,-118,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'OP_POW':([98,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,160,195,209,225,239,255,256,],[-89,150,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-118,-118,-77,-72,-93,]),'OP_MULT':([98,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,160,195,209,224,225,239,254,255,256,],[-89,147,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-118,-98,-118,-77,-70,-72,-93,]),'OP_DIV':([98,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,160,195,209,224,225,239,254,255,256,],[-89,148,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-118,-98,-118,-77,-70,-72,-93,]),'OP_MOD':([98,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,160,195,209,224,225,239,254,255,256,],[-89,149,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-118,-98,-118,-77,-70,-72,-93,]),'OP_SUBS':([98,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,160,195,209,221,222,223,224,225,239,251,252,253,254,255,256,],[-89,145,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-118,-97,-97,-97,-98,-118,-77,-66,-67,-68,-70,-72,-93,]),'OP_ADD':([98,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,160,195,209,221,222,223,224,225,239,251,252,253,254,255,256,],[-89,146,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-118,-97,-97,-97,-98,-118,-77,-66,-67,-68,-70,-72,-93,]),'OP_EQUALTO':([98,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,219,220,221,222,223,224,225,239,249,250,251,252,253,254,255,256,],[-89,139,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-96,-96,-97,-97,-97,-98,-118,-77,-63,-64,-66,-67,-68,-70,-72,-93,]),'OP_DIFF':([98,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,219,220,221,222,223,224,225,239,249,250,251,252,253,254,255,256,],[-89,140,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-96,-96,-97,-97,-97,-98,-118,-77,-63,-64,-66,-67,-68,-70,-72,-93,]),'OP_LESST':([98,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,219,220,221,222,223,224,225,239,249,250,251,252,253,254,255,256,],[-89,141,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-96,-96,-97,-97,-97,-98,-118,-77,-63,-64,-66,-67,-68,-70,-72,-93,]),'OP_LESSTEQ':([98,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,219,220,221,222,223,224,225,239,249,250,251,252,253,254,255,256,],[-89,142,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-96,-96,-97,-97,-97,-98,-118,-77,-63,-64,-66,-67,-68,-70,-72,-93,]),'OP_GREATT':([98,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,219,220,221,222,223,224,225,239,249,250,251,252,253,254,255,256,],[-89,143,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-96,-96,-97,-97,-97,-98,-118,-77,-63,-64,-66,-67,-68,-70,-72,-93,]),'OP_GREATTEQ':([98,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,219,220,221,222,223,224,225,239,249,250,251,252,253,254,255,256,],[-89,144,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-96,-96,-97,-97,-97,-98,-118,-77,-63,-64,-66,-67,-68,-70,-72,-93,]),'PR_and':([98,112,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,213,214,215,216,217,218,219,220,221,222,223,224,225,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,],[-89,137,-55,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-95,-95,-95,-95,-95,-95,-96,-96,-97,-97,-97,-98,-118,-77,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-68,-70,-72,-93,]),'PR_or':([98,112,113,114,115,116,117,118,119,120,121,135,151,153,154,155,156,157,158,159,195,209,213,214,215,216,217,218,219,220,221,222,223,224,225,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,],[-89,138,-55,-62,-65,-69,-118,-118,-118,-118,-118,-88,-71,-73,-90,-74,-91,-75,-92,-76,-118,-118,-95,-95,-95,-95,-95,-95,-96,-96,-97,-97,-97,-98,-118,-77,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-68,-70,-72,-93,]),'PR_else':([266,274,],[-106,282,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'startQuad':([0,],[2,]),'varGlobales':([2,7,],[3,15,]),'empty':([2,6,7,8,9,10,11,22,24,25,26,27,29,30,31,57,59,61,62,63,64,65,66,67,68,72,106,110,117,118,119,120,121,122,123,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,160,164,195,209,210,225,226,228,238,266,287,],[5,14,5,17,17,17,17,14,17,17,17,17,45,45,49,69,84,69,69,69,69,69,69,69,69,98,49,135,98,154,156,158,158,163,135,69,135,135,135,135,135,135,135,135,135,135,135,135,135,135,98,198,98,135,69,256,163,260,69,275,69,]),'cambiaScope':([3,],[6,]),'defVariables':([4,57,61,62,63,64,65,66,67,68,132,210,238,287,],[7,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'declaraFunciones':([6,22,],[12,36,]),'tipoVar':([8,9,10,11,24,25,26,27,],[16,18,19,20,38,39,40,41,]),'defFuncion':([13,],[22,]),'decTipo':([13,58,172,],[23,81,81,]),'defVar1':([16,18,19,20,44,],[28,32,33,34,55,]),'variable':([16,18,19,20,44,],[29,29,29,29,29,]),'arreglo':([16,18,19,20,44,],[30,30,30,30,30,]),'fillMainQuad':([21,],[35,]),'defVar2':([29,30,],[43,46,]),'meteVariable':([31,106,],[47,131,]),'agregaFuncion':([37,],[54,]),'setMainFuncionValores':([53,],[57,]),'mainBloque':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[60,86,87,88,89,90,91,92,93,173,240,265,288,]),'funcCiclos':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[61,61,61,61,61,61,61,61,61,61,61,61,61,]),'funcCondicionales':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[62,62,62,62,62,62,62,62,62,62,62,62,62,]),'llamadaDeFunciones':([57,61,62,63,64,65,66,67,68,132,164,210,238,287,],[64,64,64,64,64,64,64,64,64,64,197,64,64,64,]),'funcIgual':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[65,65,65,65,65,65,65,65,65,65,65,65,65,]),'funcWrite':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[66,66,66,66,66,66,66,66,66,66,66,66,66,]),'funcRead':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[67,67,67,67,67,67,67,67,67,67,67,67,67,]),'funcReturn':([57,61,62,63,64,65,66,67,68,132,210,238,287,],[68,68,68,68,68,68,68,68,68,68,68,68,68,]),'funcionesDibuja':([57,61,62,63,64,65,66,67,68,132,164,210,238,287,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'decParametros':([58,172,],[82,206,]),'escribeArr':([59,],[83,]),'whileCuadP1':([70,],[94,]),'eraCuadruplo':([72,195,],[96,96,]),'pushPilaVar':([72,117,160,195,],[97,151,151,151,]),'endPrograma':([85,],[108,]),'defExpresiones':([95,109,134,152,164,177,178,],[111,133,175,191,196,211,212,]),'decExpresion':([95,109,134,152,164,177,178,],[112,112,112,112,112,112,112,]),'miniExp':([95,109,122,134,152,164,177,178,179,180,181,182,183,184,185,186,226,],[113,113,162,113,113,113,113,113,213,214,215,216,217,218,219,220,162,]),'microExp':([95,109,122,134,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,226,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,221,222,223,114,]),'micromicroExp':([95,109,122,134,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,226,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,224,115,]),'decSolucion':([95,109,122,134,152,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,226,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'pushPilaOp':([110,123,137,138,139,140,141,142,143,144,145,146,147,148,149,150,209,],[134,164,177,178,179,180,181,182,183,184,185,186,187,188,189,190,239,]),'agregaIntCuad':([118,],[153,]),'agregaFloatCuad':([119,],[155,]),'agregaBoolCuad':([120,121,],[157,159,]),'decParamFuncs':([122,226,],[161,257,]),'agregaWriteCuad':([124,],[165,]),'agregaReadCuad':([125,],[166,]),'agregaReturnCuad':([126,],[167,]),'agregaIfCuadP1':([136,],[176,]),'paramCuadruplo':([160,162,],[192,194,]),'whileCuadP2':([174,],[208,]),'agregaIgualFuncCuad':([197,],[229,]),'endProcCuad':([207,],[237,]),'agregaAndCuad':([211,212,],[241,242,]),'agregaComparCuad':([213,214,215,216,217,218,],[243,244,245,246,247,248,]),'agregaSumResCuad':([219,220,],[249,250,]),'agregaMultDivCuad':([221,222,223,],[251,252,253,]),'agregaPowCuad':([224,],[254,]),'cuadArrPush':([225,],[255,]),'goSubCuadruplo':([227,],[258,]),'extraNeed':([228,],[259,]),'agregaIgualCuad':([259,],[267,]),'else':([266,],[273,]),'agregaIfCuadP2':([266,],[274,]),'whileCuadP3':([272,],[280,]),'agregaIfCuadP3':([273,],[281,]),'circuloCuad':([276,],[283,]),'rectanguloCuad':([277,],[284,]),'espiralCuad':([278,],[285,]),'estrellaCuad':([279,],[286,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> startQuad varGlobales cambiaScope declaraFunciones PR_main fillMainQuad TO_BRACKOP setMainFuncionValores mainBloque TO_BRACKCLO endPrograma','programa',11,'p_programa','Doodlr.py',68),
  ('startQuad -> <empty>','startQuad',0,'p_startQuad','Doodlr.py',72),
  ('fillMainQuad -> <empty>','fillMainQuad',0,'p_fillMainQuad','Doodlr.py',78),
  ('endPrograma -> <empty>','endPrograma',0,'p_endPrograma','Doodlr.py',84),
  ('cambiaScope -> <empty>','cambiaScope',0,'p_cambiaScope','Doodlr.py',89),
  ('varGlobales -> PR_global defVariables varGlobales','varGlobales',3,'p_varGlobales','Doodlr.py',95),
  ('varGlobales -> empty','varGlobales',1,'p_varGlobales','Doodlr.py',96),
  ('declaraFunciones -> PR_function defFuncion declaraFunciones','declaraFunciones',3,'p_declaraFunciones','Doodlr.py',100),
  ('declaraFunciones -> empty','declaraFunciones',1,'p_declaraFunciones','Doodlr.py',101),
  ('defFuncion -> decTipo ID agregaFuncion TO_PAROP decParametros TO_PARCLO TO_BRACKOP mainBloque TO_BRACKCLO endProcCuad','defFuncion',10,'p_defFuncion','Doodlr.py',104),
  ('agregaFuncion -> <empty>','agregaFuncion',0,'p_agregaFuncion','Doodlr.py',107),
  ('endProcCuad -> <empty>','endProcCuad',0,'p_endProcCuad','Doodlr.py',124),
  ('decParametros -> decTipo ID meteVariable','decParametros',3,'p_decParametros','Doodlr.py',130),
  ('decParametros -> decTipo ID meteVariable TO_COMA decParametros','decParametros',5,'p_decParametros','Doodlr.py',131),
  ('mainBloque -> funcCiclos mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',135),
  ('mainBloque -> funcCondicionales mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',136),
  ('mainBloque -> defVariables mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',137),
  ('mainBloque -> llamadaDeFunciones mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',138),
  ('mainBloque -> funcIgual mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',139),
  ('mainBloque -> funcWrite mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',140),
  ('mainBloque -> funcRead mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',141),
  ('mainBloque -> funcReturn mainBloque','mainBloque',2,'p_mainBloque','Doodlr.py',142),
  ('mainBloque -> empty','mainBloque',1,'p_mainBloque','Doodlr.py',143),
  ('setMainFuncionValores -> <empty>','setMainFuncionValores',0,'p_setMainFuncionValores','Doodlr.py',147),
  ('funcWrite -> PR_write TO_PAROP ID agregaWriteCuad TO_PARCLO TO_PuntoComa','funcWrite',6,'p_funcWrite','Doodlr.py',158),
  ('funcRead -> PR_read TO_PAROP ID agregaReadCuad TO_PARCLO TO_PuntoComa','funcRead',6,'p_funcRead','Doodlr.py',162),
  ('funcReturn -> PR_return TO_PAROP ID agregaReturnCuad TO_PARCLO TO_PuntoComa','funcReturn',6,'p_funcReturn','Doodlr.py',166),
  ('funcIgual -> ID pushPilaVar OP_EQUALS pushPilaOp defExpresiones TO_PuntoComa extraNeed agregaIgualCuad','funcIgual',8,'p_funcIgual','Doodlr.py',170),
  ('funcIgual -> ID pushPilaVar OP_EQUALS pushPilaOp llamadaDeFunciones agregaIgualFuncCuad','funcIgual',6,'p_funcIgual','Doodlr.py',171),
  ('extraNeed -> empty','extraNeed',1,'p_extraNeed','Doodlr.py',174),
  ('funcCiclos -> PR_While whileCuadP1 TO_PAROP defExpresiones TO_PARCLO whileCuadP2 TO_BRACKOP mainBloque TO_BRACKCLO whileCuadP3','funcCiclos',10,'p_funcCiclos','Doodlr.py',178),
  ('funcCondicionales -> PR_if TO_PAROP defExpresiones TO_PARCLO agregaIfCuadP1 TO_BRACKOP mainBloque TO_BRACKCLO else agregaIfCuadP3','funcCondicionales',10,'p_funcCondicionales','Doodlr.py',183),
  ('else -> agregaIfCuadP2 PR_else TO_BRACKOP mainBloque TO_BRACKCLO','else',5,'p_else','Doodlr.py',187),
  ('else -> empty','else',1,'p_else','Doodlr.py',188),
  ('decTipo -> PR_int tipoVar','decTipo',2,'p_decTipo','Doodlr.py',193),
  ('decTipo -> PR_float tipoVar','decTipo',2,'p_decTipo','Doodlr.py',194),
  ('decTipo -> PR_bool tipoVar','decTipo',2,'p_decTipo','Doodlr.py',195),
  ('decTipo -> PR_void tipoVar','decTipo',2,'p_decTipo','Doodlr.py',196),
  ('defVariables -> PR_int tipoVar defVar1 TO_PuntoComa','defVariables',4,'p_defVariables','Doodlr.py',200),
  ('defVariables -> PR_float tipoVar defVar1 TO_PuntoComa','defVariables',4,'p_defVariables','Doodlr.py',201),
  ('defVariables -> PR_bool tipoVar defVar1 TO_PuntoComa','defVariables',4,'p_defVariables','Doodlr.py',202),
  ('defVariables -> PR_void tipoVar defVar1 TO_PuntoComa','defVariables',4,'p_defVariables','Doodlr.py',203),
  ('defVar1 -> variable defVar2','defVar1',2,'p_defVar1','Doodlr.py',206),
  ('defVar1 -> arreglo defVar2','defVar1',2,'p_defVar1','Doodlr.py',207),
  ('defVar2 -> TO_COMA defVar1','defVar2',2,'p_defVar2','Doodlr.py',210),
  ('defVar2 -> empty','defVar2',1,'p_defVar2','Doodlr.py',211),
  ('variable -> ID meteVariable','variable',2,'p_variable','Doodlr.py',215),
  ('arreglo -> ID TO_CBRACKOP TO_INT TO_CBRACKCLO escribeArr','arreglo',5,'p_arreglo','Doodlr.py',221),
  ('escribeArr -> empty','escribeArr',1,'p_escribeArr','Doodlr.py',224),
  ('tipoVar -> empty','tipoVar',1,'p_tipoVar','Doodlr.py',248),
  ('meteVariable -> empty','meteVariable',1,'p_meteVariable','Doodlr.py',254),
  ('defExpresiones -> decExpresion','defExpresiones',1,'p_defExpresiones','Doodlr.py',270),
  ('defExpresiones -> decExpresion PR_and pushPilaOp defExpresiones agregaAndCuad','defExpresiones',5,'p_defExpresiones','Doodlr.py',271),
  ('defExpresiones -> decExpresion PR_or pushPilaOp defExpresiones agregaAndCuad','defExpresiones',5,'p_defExpresiones','Doodlr.py',272),
  ('decExpresion -> miniExp','decExpresion',1,'p_decExpresion','Doodlr.py',277),
  ('decExpresion -> miniExp OP_EQUALTO pushPilaOp miniExp agregaComparCuad','decExpresion',5,'p_decExpresion','Doodlr.py',278),
  ('decExpresion -> miniExp OP_DIFF pushPilaOp miniExp agregaComparCuad','decExpresion',5,'p_decExpresion','Doodlr.py',279),
  ('decExpresion -> miniExp OP_LESST pushPilaOp miniExp agregaComparCuad','decExpresion',5,'p_decExpresion','Doodlr.py',280),
  ('decExpresion -> miniExp OP_LESSTEQ pushPilaOp miniExp agregaComparCuad','decExpresion',5,'p_decExpresion','Doodlr.py',281),
  ('decExpresion -> miniExp OP_GREATT pushPilaOp miniExp agregaComparCuad','decExpresion',5,'p_decExpresion','Doodlr.py',282),
  ('decExpresion -> miniExp OP_GREATTEQ pushPilaOp miniExp agregaComparCuad','decExpresion',5,'p_decExpresion','Doodlr.py',283),
  ('miniExp -> microExp','miniExp',1,'p_miniExp','Doodlr.py',288),
  ('miniExp -> microExp OP_SUBS pushPilaOp miniExp agregaSumResCuad','miniExp',5,'p_miniExp','Doodlr.py',289),
  ('miniExp -> microExp OP_ADD pushPilaOp miniExp agregaSumResCuad','miniExp',5,'p_miniExp','Doodlr.py',290),
  ('microExp -> micromicroExp','microExp',1,'p_microExp','Doodlr.py',295),
  ('microExp -> micromicroExp OP_MULT pushPilaOp microExp agregaMultDivCuad','microExp',5,'p_microExp','Doodlr.py',296),
  ('microExp -> micromicroExp OP_DIV pushPilaOp microExp agregaMultDivCuad','microExp',5,'p_microExp','Doodlr.py',297),
  ('microExp -> micromicroExp OP_MOD pushPilaOp microExp agregaMultDivCuad','microExp',5,'p_microExp','Doodlr.py',298),
  ('micromicroExp -> decSolucion','micromicroExp',1,'p_micromicroExp','Doodlr.py',302),
  ('micromicroExp -> decSolucion OP_POW pushPilaOp micromicroExp agregaPowCuad','micromicroExp',5,'p_micromicroExp','Doodlr.py',303),
  ('decSolucion -> ID pushPilaVar','decSolucion',2,'p_decSolucion','Doodlr.py',307),
  ('decSolucion -> ID TO_CBRACKOP defExpresiones TO_CBRACKCLO cuadArrPush','decSolucion',5,'p_decSolucion','Doodlr.py',308),
  ('decSolucion -> TO_INT agregaIntCuad','decSolucion',2,'p_decSolucion','Doodlr.py',309),
  ('decSolucion -> TO_FLOAT agregaFloatCuad','decSolucion',2,'p_decSolucion','Doodlr.py',310),
  ('decSolucion -> PR_true agregaBoolCuad','decSolucion',2,'p_decSolucion','Doodlr.py',311),
  ('decSolucion -> PR_false agregaBoolCuad','decSolucion',2,'p_decSolucion','Doodlr.py',312),
  ('decSolucion -> TO_PAROP pushPilaOp defExpresiones TO_PARCLO pushPilaOp','decSolucion',5,'p_decSolucion','Doodlr.py',313),
  ('llamadaDeFunciones -> ID eraCuadruplo TO_PAROP decParamFuncs TO_PARCLO TO_PuntoComa goSubCuadruplo','llamadaDeFunciones',7,'p_llamadaDeFunciones','Doodlr.py',318),
  ('llamadaDeFunciones -> funcionesDibuja','llamadaDeFunciones',1,'p_llamadaDeFunciones','Doodlr.py',319),
  ('llamadaDeFunciones -> empty','llamadaDeFunciones',1,'p_llamadaDeFunciones','Doodlr.py',320),
  ('funcionesDibuja -> PR_circulo TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa circuloCuad','funcionesDibuja',10,'p_funcionesDibuja','Doodlr.py',323),
  ('funcionesDibuja -> PR_rectangulo TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa rectanguloCuad','funcionesDibuja',10,'p_funcionesDibuja','Doodlr.py',324),
  ('funcionesDibuja -> PR_espiral TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa espiralCuad','funcionesDibuja',10,'p_funcionesDibuja','Doodlr.py',325),
  ('funcionesDibuja -> PR_estrella TO_PAROP ID TO_COMA ID TO_COMA ID TO_PARCLO TO_PuntoComa estrellaCuad','funcionesDibuja',10,'p_funcionesDibuja','Doodlr.py',326),
  ('decParamFuncs -> miniExp paramCuadruplo','decParamFuncs',2,'p_decParamFuncs','Doodlr.py',329),
  ('decParamFuncs -> ID paramCuadruplo TO_COMA decParamFuncs','decParamFuncs',4,'p_decParamFuncs','Doodlr.py',330),
  ('decParamFuncs -> empty','decParamFuncs',1,'p_decParamFuncs','Doodlr.py',331),
  ('pushPilaOp -> empty','pushPilaOp',1,'p_pushPilaOp','Doodlr.py',337),
  ('pushPilaVar -> empty','pushPilaVar',1,'p_pushPilaVar','Doodlr.py',343),
  ('agregaIntCuad -> empty','agregaIntCuad',1,'p_agregaIntCuad','Doodlr.py',349),
  ('agregaFloatCuad -> empty','agregaFloatCuad',1,'p_agregaFloatCuad','Doodlr.py',358),
  ('agregaBoolCuad -> empty','agregaBoolCuad',1,'p_agregaBoolCuad','Doodlr.py',367),
  ('cuadArrPush -> empty','cuadArrPush',1,'p_CuadruploArrpush','Doodlr.py',378),
  ('agregaAndCuad -> <empty>','agregaAndCuad',0,'p_agregaAndCuad','Doodlr.py',402),
  ('agregaComparCuad -> <empty>','agregaComparCuad',0,'p_agregaComparCuad','Doodlr.py',425),
  ('agregaSumResCuad -> <empty>','agregaSumResCuad',0,'p_agregaSumResCuad','Doodlr.py',450),
  ('agregaMultDivCuad -> <empty>','agregaMultDivCuad',0,'p_agregaMultDivCuad','Doodlr.py',473),
  ('agregaPowCuad -> <empty>','agregaPowCuad',0,'p_agregaPowCuad','Doodlr.py',496),
  ('agregaIgualCuad -> <empty>','agregaIgualCuad',0,'p_agregaIgualCuad','Doodlr.py',522),
  ('agregaIgualFuncCuad -> <empty>','agregaIgualFuncCuad',0,'p_agregaIgualFuncCuad','Doodlr.py',539),
  ('cuadruploAsignaArr -> empty','cuadruploAsignaArr',1,'p_CuadruploAsignaARR','Doodlr.py',549),
  ('agregaWriteCuad -> <empty>','agregaWriteCuad',0,'p_agregaWriteCuad','Doodlr.py',576),
  ('agregaReadCuad -> <empty>','agregaReadCuad',0,'p_agregaReadCuad','Doodlr.py',582),
  ('agregaReturnCuad -> <empty>','agregaReturnCuad',0,'p_agregaReturnCuad','Doodlr.py',588),
  ('agregaIfCuadP1 -> <empty>','agregaIfCuadP1',0,'p_agregaIfCuadP1','Doodlr.py',596),
  ('agregaIfCuadP2 -> <empty>','agregaIfCuadP2',0,'p_agregaIfCuadP2','Doodlr.py',601),
  ('agregaIfCuadP3 -> <empty>','agregaIfCuadP3',0,'p_agregaIfCuadP3','Doodlr.py',608),
  ('whileCuadP1 -> <empty>','whileCuadP1',0,'p_whileCuadP1','Doodlr.py',614),
  ('whileCuadP2 -> <empty>','whileCuadP2',0,'p_whileCuadP2','Doodlr.py',619),
  ('whileCuadP3 -> <empty>','whileCuadP3',0,'p_whileCuadP3','Doodlr.py',624),
  ('paramCuadruplo -> <empty>','paramCuadruplo',0,'p_paramCuadruplo','Doodlr.py',634),
  ('eraCuadruplo -> <empty>','eraCuadruplo',0,'p_eraCuadruplo','Doodlr.py',643),
  ('goSubCuadruplo -> <empty>','goSubCuadruplo',0,'p_goSubCuadruplo','Doodlr.py',650),
  ('circuloCuad -> <empty>','circuloCuad',0,'p_circuloCuad','Doodlr.py',658),
  ('rectanguloCuad -> <empty>','rectanguloCuad',0,'p_rectanguloCuad','Doodlr.py',665),
  ('espiralCuad -> <empty>','espiralCuad',0,'p_espiralCuad','Doodlr.py',672),
  ('estrellaCuad -> <empty>','estrellaCuad',0,'p_estrellaCuad','Doodlr.py',679),
  ('empty -> <empty>','empty',0,'p_empty','Doodlr.py',825),
]
